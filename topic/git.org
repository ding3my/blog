* 日志实例
** 如何git测试本地项目？
？解决proj caps上传到github caps，然后opt caps pull的繁琐问题。

opt caps直接pull proj caps。
** 如何git修改remote origin？
？解决proj caps上传到github caps，然后opt caps pull的繁琐问题。

#+BEGIN_SRC  
https://www.google.com/search?q=git+修改+远程&ie=utf-8&oe=utf-8
https://ddnode.com/2015/04/14/git-modify-remote-responsity-url.html

git remote set-url origin [url]

#+END_SRC
** DONE 如何解决git clone报错Bad owner or permissions on？
   CLOSED: [2017-08-01 Tue 09:46]
？使用ssh key验证，避免手动输入帐号密码。

#+BEGIN_VERSE
https://serverfault.com/questions/253313/ssh-hostname-returns-bad-owner-or-permissions-on-ssh-config

chmod 600 ~/.ssh/config
#+END_VERSE

** DONE 如何解决git clone报错Permission denied (publickey).
   CLOSED: [2017-08-01 Tue 09:46]
？使用ssh key验证，避免手动输入帐号密码。

#+BEGIN_VERSE
you must generate an SSH keypair on your computer and add the public key to your GitHub account.
https://help.github.com/articles/which-remote-url-should-i-use/
#+END_VERSE

** DONE 如何git只输入密码不输入用户名，在git push的时候？
   CLOSED: [2017-08-01 Tue 09:49]
？使用https解决ssh无法使用proxychains4。解决git clone速度慢。

#+BEGIN_VERSE
git config remote.origin.url https://username@github.com/your/example.git

http://stackoverflow.com/questions/43805486/is-there-a-way-to-avoid-inputting-username-when-git-push-with-https
#+END_VERSE
** DONE 什么是git push中origin的意思？
   CLOSED: [2017-08-01 Tue 09:58]
？git push本地仓库到github。

#+BEGIN_VERSE
https://www.google.com/search?q=what+mean+origin+git&ie=utf-8&oe=utf-8

http://stackoverflow.com/questions/5270760/whats-the-meaning-of-origin-in-git-push-origin-master
nicknames

http://stackoverflow.com/questions/9529497/what-is-origin-in-git
origin is an alias on your system for a particular remote repository. It's not actually a property of that repository.

#+END_VERSE
https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes
* 理论
** 测试代码
mkdir gt; cd gt; git init; touch t; git add t; git commit -m1;
touch tt; git add tt; git commit -m2;

** 配置文件
*** 检索配置文件
#+BEGIN_SRC  
cat .git/config
#+END_SRC
Git版本控制管理 2ed 25
https://git-scm.com/book/tr/v2/Customizing-Git-Git-Configuration
*** 新建配置文件
参考"检索配置文件"
*** 删除配置文件
参考"检索配置文件"
*** 删除配置文件的配置
#+BEGIN_SRC  
git config --unset
#+END_SRC
Git版本控制管理 2ed 26
https://git-scm.com/docs/git-config
*** 修改配置文件
#+BEGIN_SRC  
git config --edit
#+END_SRC
https://git-scm.com/docs/git-config
*** 修改配置文件的默认编辑器
#+BEGIN_SRC  
git config --global core.editor $editor
# git config --global core.editor emacs
#+END_SRC
https://git-scm.com/book/tr/v2/Customizing-Git-Git-Configuration
** 全局配置文件
*** 检索全局配置文件
#+BEGIN_SRC  
cat ~/.gitconfig
#+END_SRC
Git版本控制管理 2ed 25
https://git-scm.com/book/tr/v2/Customizing-Git-Git-Configuration
*** 新建全局配置文件
参考"检索全局配置文件"
*** 删除全局配置文件
参考"检索全局配置文件"
*** 删除全局配置文件的配置
#+BEGIN_SRC  
git config --unset --global
#+END_SRC
Git版本控制管理 2ed 26
*** 修改全局配置文件
#+BEGIN_SRC  
git config --global --edit
#+END_SRC
https://git-scm.com/docs/git-config
** 提交者名字
HTTPS可以不用配置。
ref Git版本控制管理 2ed 21
参考"提交者邮箱"
** 提交者邮箱
github与该邮箱有关。
HTTPS可以不用配置。

google git show committer name
http://alvinalexander.com/git/git-show-change-username-email-address

*** 检索提交者全局邮箱
#+BEGIN_SRC  
git config --list
#+END_SRC
   
google git show committer name
*** 检索提交者仓库邮箱
#+BEGIN_SRC  
git config --list --global
#+END_SRC
*** 新增提交者全局邮箱
#+BEGIN_SRC  
git config --global user.email "$email"
#+END_SRC

*** 新增提交者仓库邮箱
#+BEGIN_SRC  
git config user.email "$email"
#+END_SRC
*** 删除提交者邮箱
参考"新增"
*** 修改提交者邮箱
参考"新增"
** 仓库
*** 检索目录是否是仓库
   	[ -d .git ] || git rev-parse --git-dir > /dev/null 2>&1
   	http://stackoverflow.com/questions/2180270/check-if-current-directory-is-a-git-repository
*** 新增仓库
git init
*** 删除仓库
rm -fr .git
rm不安全
http://stackoverflow.com/questions/1213430/how-to-fully-delete-a-git-repository-created-with-init
*** 修改（暂无）
** 暂存文件（stash）
暂存的文件有3种状态：add、rm、mv
*** 检索所有暂存的文件
git status

*** 新增暂存的文件
git add filename

*** 新增暂存的文件，强行新增，即使文件没有变化
git rm --cached <file>
git add <file>

ref google git add unchanged file http://stackoverflow.com/questions/22666606/how-to-force-git-to-commit-a-file-if-it-is-recognized-as-unchanged
*** 新增暂存的文件，已删除的文件到暂存区
git rm filename

直接rm文件后，不使用git rm无法提交该删除
ref google git add file deleted
*** 删除暂存的文件
git reset HEAD filename
ref git add hint

git rm -cathed filename 即使没有在暂存区，也会有取消跟踪该文件的操作到暂存区
google staged file remove git
*** 删除暂存的文件和工作目录的文件
git rm -f filename
*** 修改暂存的文件的名字（同时修改工作目录的文件）
git mv filename newfile
** 未追踪文件
*** 检索未追踪文件
#+BEGIN_SRC  
git status
#+END_SRC
*** 新建未追踪文件
*** 删除未追踪文件
*** 修改未追踪文件
** 追踪文件
*** 检索所有追踪的文件
#+BEGIN_SRC  
git ls-tree --full-tree -r --name-only HEAD
#+END_SRC

google git show all tracked file
*** 新增追踪文件
#+BEGIN_SRC  
git add $file
git commit -m"msg"
#+END_SRC
*** 删除追踪文件
#+BEGIN_SRC  
git rm -cathed $file
#+END_SRC
*** 修改追踪的文件（暂无）
** 忽略文件
ref Git版本控制管理 2ed 55
*** 检索忽略文件
#+BEGIN_SRC  
cat .gitignore
#+END_SRC
*** 检索全局忽略文件
#+BEGIN_SRC  
cat ~/.gitignore
#+END_SRC
*** 新建忽略文件
#+BEGIN_SRC  
touch .gitignore
#+END_SRC

https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository
*** 新建全局忽略文件
#+BEGIN_SRC  
ignore="$HOME/.gitignore"
git config --global core.excludesfile "$ignore"
touch "$ignore"
#+END_SRC
   
google git global ignore file
http://stackoverflow.com/questions/7335420/global-git-ignore
google git config --global core.excludesfile
https://git-scm.com/book/tr/v2/Customizing-Git-Git-Configuration
*** 删除全局忽略文件的配置
#+BEGIN_SRC  
git config --global --unset core.excludesfile
#+END_SRC
http://stackoverflow.com/questions/11868447/how-can-i-remove-an-entry-in-global-configuration-with-git-config
*** 修改全局忽略文件的配置
#+BEGIN_SRC  
git config --global --edit
#+END_SRC
http://stackoverflow.com/questions/11868447/how-can-i-remove-an-entry-in-global-configuration-with-git-config
** git对象
*** 检索所有的git对象
git rev-list --objects --all

ref google git show all tree object
*** 检索指定sha1对象的类型
git cat-file -t sha1part

ref https://git-scm.com/book/zh/v2/Git-内部原理-Git-对象 ref google git 树 对象
 
** 块对象 blob
*** TODO 检索所有的块文件
git ls-files -s
** 树对象
*** TODO 检索所有的树
*** 检索指定sha1树的内容
git cat-file -p sha1part

Pretty-print the contents of <object> based on its type.
*** 新增树
git write-tree

** 提交对象
*** 检索所有提交（id、作者、时间、msg）
#+BEGIN_SRC  
git log
#+END_SRC
ref Git版本控制管理 2ed 22
*** 检索指定sha1提交的详细日志
git show sha1part
*** 检索指定文件的提交
git log --follow filename
ref http://stackoverflow.com/questions/3701404/list-all-commits-for-a-specific-file
*** 新增提交
   	git commit -m"msg"
*** 删除指定范围提交
不要使用reset来删除，类似rm，太危险

git reset --hard HEAD~1

mkdir gt; cd gt; git init; touch t; git add t; git commit -m1;
touch tt; git add tt; git commit -m2;
git reset --hard HEAD~1

ref google git delete commit
*** 修改最后提交的message？
git commit --amend

git commit --amend -m "New commit message"

ref git update commit
*** TODO 修改指定提交的message
*** TODO 如何恢复reset --hard的commit？
git reflog show
git reset HEAD@{1}

mkdir gt; cd gt; git init; touch t; git add t; git commit -m1;
touch tt; git add tt; git commit -m2;
git reset --hard HEAD~1
git reset HEAD@{1} #tt文件丢失
git stash


ref google recover git reset
ref google Unstaged changes after reset
** 标签
标签是基于commit的。
*** 检索所有的标签
git tag
*** 检索所有的标签，git show-ref
git show-ref --tags
*** 检索指定commit的标签
git show-ref --tags | grep ^xxx

ref git show tags specific commit

*** 新增标签
mkdir gt; cd gt; git init; touch t; git add t; git commit -m1;
touch tt; git add tt; git commit -m2;

git tag "ver" commitsha1

ref 41
*** 删除标签
git tag -d tagname

ref google git delete tag
*** 修改标签
git tag new old
git tag -d old

ref google git rename tag

** 分支
基于commit的分支。
*** 检索当前的分支
#+BEGIN_SRC  
git branch
#+END_SRC
星号就是

ref google git show current branch name
*** 检索所有的分支
#+BEGIN_SRC  
git branch
#+END_SRC

ref 88
*** 检索所有的远程分支
#+BEGIN_SRC  
git ls-remote
#+END_SRC

google git show all remote branch
*** 新建分支
mkdir gt; cd gt; git init; touch t; git add t; git commit -m1;
git branch b

必须有一次提交才能建立分支。且此时b和master分支同时指向一个commit
*** 新建分支并切换分支
mkdir gt; cd gt; git init; touch t; git add t; git commit -m1;
git checkout -b b

ref git create branch and switch
*** 删除本地的分支
mkdir gt; cd gt; git init; touch t; git add t; git commit -m1;
git branch b
git branch -d b

ref google git remove branch
*** 修改指定分支为当前分支
mkdir gt; cd gt; git init; touch t; git add t; git commit -m1;
git checkout -b b

** 远程仓库
*** 检索远程仓库url别名，.git/config
#+BEGIN_SRC  
cat .git/config
#+END_SRC
ref Git版本控制管理 2ed 193
*** 检索远程仓库url别名，git remote
#+BEGIN_SRC  
git remote -v
#+END_SRC
https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes
*** 新建远程仓库url别名到本地仓库
#+BEGIN_SRC  
git remote add $alias $url
#+END_SRC
https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes
*** 删除远程仓库url别名
#+BEGIN_SRC  
git remote remove $alias
#+END_SRC
https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes
*** 修改远程仓库url别名
#+BEGIN_SRC  
git remote rename $old $new
#+END_SRC
https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes
** 远程文件
*** 检索远程文件
http://stackoverflow.com/questions/1178389/browse-and-display-files-in-a-git-repo-without-cloning
*** 新增远程文件
参考"修改远程文件"
*** 删除远程文件
参考"修改远程文件"
*** 修改远程文件
#+BEGIN_SRC  
git push -u origin master
#+END_SRC
ref github init
** TODO 裸仓库
** TODO 开发仓库
** TODO 补丁
** TODO 钩子
